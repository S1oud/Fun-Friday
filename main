import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Random;

public class ColorCatcher extends JFrame {
    private static final int FRAME_WIDTH = 600;
    private static final int FRAME_HEIGHT = 400;
    private static final int CHARACTER_WIDTH = 50;
    private static final int CHARACTER_HEIGHT = 50;
    private static final int BALL_SIZE = 20;
    private static final int CHARACTER_SPEED = 5;
    private static final int BALL_SPEED = 2;

    private JPanel gamePanel;
    private Timer timer;
    private int characterX, characterY;
    private Color characterColor;
    private boolean[] keyDown;

    public ColorCatcher() {
        setTitle("Color Catcher");
        setSize(FRAME_WIDTH, FRAME_HEIGHT);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);

        gamePanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.setColor(characterColor);
                g.fillRect(characterX, characterY, CHARACTER_WIDTH, CHARACTER_HEIGHT);
            }
        };

        gamePanel.setBackground(Color.WHITE);
        gamePanel.setFocusable(true);
        add(gamePanel);

        keyDown = new boolean[256];
        characterX = FRAME_WIDTH / 2 - CHARACTER_WIDTH / 2;
        characterY = FRAME_HEIGHT - CHARACTER_HEIGHT - 30;
        characterColor = Color.RED;

        gamePanel.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                keyDown[e.getKeyCode()] = true;
            }

            @Override
            public void keyReleased(KeyEvent e) {
                keyDown[e.getKeyCode()] = false;
            }
        });

        timer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (keyDown[KeyEvent.VK_LEFT] && characterX > 0) {
                    characterX -= CHARACTER_SPEED;
                }
                if (keyDown[KeyEvent.VK_RIGHT] && characterX < FRAME_WIDTH - CHARACTER_WIDTH) {
                    characterX += CHARACTER_SPEED;
                }

                gamePanel.repaint();
            }
        });

        timer.start();

        generateBall();
    }

    private void generateBall() {
        Random rand = new Random();
        int ballX = rand.nextInt(FRAME_WIDTH - BALL_SIZE);
        int ballY = 0;
        Color ballColor = new Color(rand.nextInt(256), rand.nextInt(256), rand.nextInt(256));

        Timer ballTimer = new Timer(10, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                ballY += BALL_SPEED;
                if (ballY > FRAME_HEIGHT) {
                    ((Timer) e.getSource()).stop();
                    generateBall();
                }

                if (ballY + BALL_SIZE >= characterY && ballY <= characterY + CHARACTER_HEIGHT &&
                        ballX + BALL_SIZE >= characterX && ballX <= characterX + CHARACTER_WIDTH) {
                    if (ballColor.equals(characterColor)) {
                        ((Timer) e.getSource()).stop();
                        generateBall();
                    } else {
                        JOptionPane.showMessageDialog(ColorCatcher.this, "Game Over! You caught the wrong color.");
                        System.exit(0);
                    }
                }

                gamePanel.repaint();
            }
        });

        ballTimer.start();
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new ColorCatcher().setVisible(true);
            }
        });
    }
}
